
<h1>Entile API</h1>

<div class="row">
    <div class="offset2 span10">
        <form class="form-horizontal">
            <input type="text" data-bind="value: currentFilteredUri" class="span7"/>
            <input type="submit" data-bind="click:refresh" value="Refresh"/>
        </form>
    </div>
</div>
<div class="row">
    <div class="span2">
        <ul data-bind="foreach: links" class="nav nav-list">
            <li><a href="#" data-bind="text: name, attr: { 'href' : uri }, click : $parent.followLink"></a></li>
        </ul>
    </div>
	<script type="text/html" id="content-template">
		<dt data-bind="text: name"></dt>
		<dd>
			<span data-bind="text: value"></span>
			<div data-bind="template : { name: 'content-template', foreach: nested }" />
		</dd>
	</script>
	<script type="text/html" id="field-template">
		<div class="control-group">
			<label class="control-label" data-bind="text: description"></label>
			<div class="controls">
				<div data-bind="template : { name: 'field-template', foreach: fields }"></div>
				<div data-bind="if: fields().length < 1">
					<input type="text" data-bind="value: value"/>
				</div>
            </div>
        </div>
	</script>
    <div class="span10">
        <div data-bind="with: errorMessage">
            <div class="alert alert-block alert-error">
                <a class="close" href="#" data-bind="click: function() { $parent.errorMessage(null); }">×</a>
                <h4 class="alert-heading" data-bind="text: title"></h4>
                <span data-bind="text:details"></span>
            </div>
        </div>
        <div data-bind="with: locationMessage">
            <div class="alert alert-block alert-info">
                <a class="close" href="#" data-bind="click: function() { $parent.locationMessage(null); }">×</a>
                <h4 class="alert-heading">Location</h4>
                <a href="#" data-bind="text: $data, click: $parent.currentFilteredUri"></a>
            </div>
        </div>
        <ul class="nav nav-tabs">
            <li data-bind="css : {'active' : !(selectedAction()) }">
                <a href="#" data-bind="click: function() { selectedAction(null); }">Content</a>
            </li>
            <!-- ko foreach: commands -->
            <li data-bind="css : { 'active' : $parent.selectedAction() == $data }"><a href="#" data-bind="text: name, attr: { 'href' : uri }, click: $parent.selectedAction "></a></li>
            <!-- /ko -->
            <!-- ko foreach: queries -->
            <li data-bind="css : { 'active' : $parent.selectedAction() == $data }"><a href="#" data-bind="text: name, attr: { 'href' : uri }, click: $parent.selectedAction "></a></li>
            <!-- /ko -->
        </ul>
        <div class="tab-content">
            <div class="tab-pane active" data-bind="ifnot: selectedAction">
                <div class="well">
                    <dl data-bind="template : { name: 'content-template', foreach: content }">
                    </dl>
                </div>
            </div>
            <div class="tab-pane active" data-bind="with: selectedAction">
                <form class="form-horizontal">
                    <fieldset>
                        <legend data-bind="text: description"></legend>
                        <!-- ko template : { name: 'field-template', foreach: fields } -->
                        <!-- /ko -->

                        <div class="control-group">
			                <label class="control-label">Uri</label>
			                <div class="controls">
                                <input type="text" data-bind="value: uri" class="input-xlarge"/>
                            </div>
                        </div>

                        <div class="form-actions">
                            <input type="submit" class="btn btn-primary" data-bind="value: method, click: $parent.sendCommand" />
                        </div>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script type="text/javascript">

    	function getDataContent(data) {
    		var content = [];
    		for(var f in data) {
    			if(f != 'Links' && f != 'Commands' && f != 'Queries') {
    				var val = data[f];
    				var nested = [];
    				if($.isArray(val)) {
    					var idx = 0;
    					for(var e in val) {
    						content.push({
    							name: f + '[' + idx + ']',
    							value: null,
    							nested: getDataContent(val[e])
    						});
    						idx++;
    					}
    				} else if($.isPlainObject(val)) {
    					nested = getDataContent(val);
    					content.push({
    						name: f,
    						value: null,
    						nested: nested
    					});
    				} else {
    					content.push({
    						name: f,
    						value: val,
    						nested: nested
    					});
    				}
    			}
    		}
    		return content;
    	}

        function Query(data) {
            var self = this;

            self.name = ko.observable(data.Name);
            self.description = ko.observable(data.Description);
            self.uri = ko.observable(data.Uri);
            self.method = ko.observable('GET');
            self.fields = ko.observableArray([]);

            if (data.Fields) {
                self.fields($.map(data.Fields, function (f, i) { return new Field(f); }));
            }
        }
        
    	function Link(data) {
    		var self = this;

    		self.name = ko.observable(data.Name);
    		self.uri = ko.observable(data.Uri);
    	}

    	function Command(data) {
    		var self = this;

    		self.name = ko.observable(data.Name);
    		self.description = ko.observable(data.Description);
    		self.method = ko.observable(data.Method);
    		self.uri = ko.observable(data.Uri);
    		self.fields = ko.observableArray([]);

    		if(data.Fields) {
    			self.fields($.map(data.Fields, function (f, i) { return new Field(f); }));
    		}

    		self.buildJson = function () {
    			var obj = new Object();
    			var fields = this.fields();
    			for(var fieldIdx in fields) {
    				var field = fields[fieldIdx];
    				var val;
    				if(field.fields().length > 0) {
    					val = self.buildJson.call(field);
    				} else {
    					val = field.value();

    					try {
    						val = $.parseJSON(val);
    					} catch(ex) {
    					}
    				}
    				obj[field.name()] = val;
    			}
    			return obj;
    		};
    	}

    	function Field(data) {
    		var self = this;

    		self.name = ko.observable(data.Name);
    		self.description = ko.observable(data.Description);
    		self.isOptional = ko.observable(data.Optional == true);
    		self.value = ko.observable();

    		self.fields = ko.observableArray([]);
    		if(data.Fields) {
    			self.fields($.map(data.Fields, function (f, i) { return new Field(f); }));
    		}
    	}

    	function Model(uri) {

    		var self = this;

    		self.currentUri = ko.observable(uri);
    		self.currentUri.subscribe(function (val) {
    			self.refresh();
    		});

    		self.currentFilteredUri = ko.computed({
    			read: self.currentUri,
    			write: function (value) {
    				var lnk = document.createElement('a');
    				lnk.setAttribute('href', value);
    				self.currentUri(lnk.pathname + lnk.search);
    			}
    		});

    		self.content = ko.observableArray();

    		self.links = ko.observableArray([]);

    		self.commands = ko.observableArray([]);

    	    self.queries = ko.observableArray([]);

    	    self.selectedAction = ko.observable();

    		self.followLink = function (link) {
    			self.currentFilteredUri(link.uri());
    		};

    		self.errorMessage = ko.observable();

    		self.locationMessage = ko.observable();

    		self.sendCommand = function () {
    			self.errorMessage(null);
    			self.locationMessage(null);
    			var cmd = self.selectedAction();

    			var commandUri = cmd.uri();
    			var content = ko.toJSON(cmd.buildJson());
    			var method = cmd.method();

    			$.ajax({
    				url: commandUri,
    				type: method,
    				contentType: 'application/json',
    				data: content,
    				dataType: 'json',
    				success: function (data, status, jqXhr) {
    					if(data != null) {
    						self.updateFromModel(data);
    					}

    					var location = jqXhr.getResponseHeader('Location');

    					if(location) {
    						self.locationMessage(location);
    					}
    				},
    				error: function (jqXhr, textStatus, errorThrown) {
    					var status = jqXhr.status;
    					self.errorMessage({ title: 'Http ' + status, details: errorThrown });
    				}
    			});
    		};

    		self.refresh = function () {
    			self.errorMessage(null);
    			self.locationMessage(null);
    			$.ajax({
    				url: self.currentUri(),
    				type: 'GET',
    				dataType: 'json',
    				success: function (data, status, jqXhr) {
    					if(data != null) {
    						self.updateFromModel(data);
    					} else {
    						var location = jqXhr.getResponseHeader('Location');
    						if(confirm('Location returned. Navigate to "' + location + '" ?'))
    							self.currentFilteredUri(location);
    					}
    				},
    				error: function (jqXhr, textStatus, errorThrown) {
    					var status = jqXhr.status;
    					self.errorMessage({ title: 'Http ' + status, details: errorThrown });
    				}
    			});
    		};

    		self.updateFromModel = function (data) {

    		    self.content(getDataContent(data));

    		    var links = $.map(data.Links, function (linkData, idx) {
    		        return new Link(linkData);
    		    });
    		    self.links(links);
    		    
    		    if (data.Commands) {
    		        var commands = $.map(data.Commands, function (commandData, idx) {
    		            return new Command(commandData);
    		        });
    		        self.commands(commands);
    		    } else {
    		        self.commands([]);
    		    }

    		    if (data.Queries) {
    		        var queries = $.map(data.Queries, function (queryData, idx) {
    		            return new Query(queryData);
    		        });

    		        self.queries(queries);
    		    } else {
    		        self.queries([]);
    		    }
    		    self.selectedAction(null);
    		};
    	}

    	$(function () {
    		var mainViewModel = new Model('/api');
    		mainViewModel.refresh();
    		ko.applyBindings(mainViewModel);
    	});
    </script>
}
